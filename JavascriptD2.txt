Day 2
<Javascript Data Type & Variable (자료형)>
- ASCII코드: 알파벳(대소문자), 숫자 (10), 특수문자 표현법
- 1byte= 8 bit
- 8(2^8) bit를 가지고있으면 아스키코드 (사람이 이해할수있는 문자들)를 표현할수있다.
- 정수는 8바이트
- 변수를 선언할때는 undefined로 지정해서 메모리를 확보하고, 값을 할당할때 메모리를 재정의한다.
- 변수는 위치(주소)를 기억하느느 저장소이다. 위치란 메모리 상의 주소(address)를 의미한다. 
    - 즉 젼수란 메모리 주소(Memory address)에 접근하기위해 사람이 이해할 수 있는 언어로 지정한 식별자(identifier)이다.

<Data Type (자료형)>
- 기본자료형:
    1. Boolean
        - True or False (논리값)
        - 두가지 값
        - 0은 false로 평가될수있고, 1은 true로 평가될수있다
        - 비어있는 문자열, null, undefined과, 숫자 0도 false로 여겨진다
    2. null(소문자)
        - 딱 한가지값만 가질수있다.
        - 무효의 의미가 강하다.
        - 메모리상에 가르키고있는 포인터를 지워서 참조를 무의미하게 한다.
        - 참조가 없어진 메모리 영역에 대해 가비지 콜렉션을 수행한다
    3. Undefined
        - 선언만 하고 할당하지 않은 상태에 갖고있는 값
    4. Number
        - 숫자
        - 무한대 infinite (+/-)
        - NaN: Not a Number 
    5. String***
        - 유니코드(16비트 부호없는 정수 값)를 지원한다
        - 홀따옴표, 쌍따옴표안에 텍스트 넣어 생성
        - 자바스크립트의 문자열은 변경불가능
    6. Symbol
        - 전체중에 유일하게 변경 불가능(immutable)한 자료형(primitive)다.
    7. Object
        - 유일하게 객체형이다

[기본자료형 (Primitive Data Type)]
- 데이터값를 변경할수 없고(Immutable Value) Pass-by-value(값으로 접근)이다.
- Immutable Value      
    - 변수의 값을 다시 바꿨을때, 원래있던 주소의 값이 변경되는게 아니고 새로운 주소에 바뀐 값이 다시 생성되고 그것을 가르키게 되는것이다.
- Pass-by-value***
    - var b=a 라고 하면, b에게 a의값을 복사해서 주는 개념. 
    - b와 a가 같은값의 주소를 share하는게 아니라 가르키는 주소는 다르지만 같은값을 갖는다는 뜻.

[객체형 (Object type, 참조형)]
- 객체는 데이터와 그 데이터에 관련되는 동작(절차,방법,기능)을 모두 포함할 수 있는 개념적 존재이다. 달리 말해, 이름과 값을 가지는 데이터를 의미하는 프로퍼티(property)와 동작을 의미하는 메소드(method)를 포함할 수 있는 독립적 주체이다.
- 기본자료형을 제외한 나머지값들은 모두 객체이다
- 기본자료형과 다르게 Pass-by-reference(참조로 접근)이고 Heap영역에 저장된다
- Mutable & Pass-by-reference

<변수(Variable)>
- 규칙: 
    - 영문자
    - _ 또는 $로 시작하여야한다
    - 대소문자를 구분한다
    - 띄어쓰기 방법:
        - 카멜케이스-> camelCase (best)
        - 케밥케이스-> kebab-case (do not use!) 
        - 스네이크케이스-> snake_case
- 변수의 중복선언
    - 문법적으로 허용되지만 의도하지 않게 변수의 값을 변경할수 있으므로 사용하지 않는 것이 좋다
- 변수 선언 시 var키워드 생략 허용
    - 생략 시 전역화 됨
- 동적 타이핑 (Dynamic Typing)
    - Javascript= 동적 타입(Dynamic Typed)/ 느슨한 타입(Loosely Typed) 언어
- 변수 호이스팅 (Variable Hoisting)***
    - 변수를 선언 이전에 참조할수 있는것 
- var 키워드로 선언된 변수의 문제점
    1. Function-level scope
    2. var 키워드 생략 허용
    3. 중복 선언 허용
    4. 변수 호이스팅

<Operators>
<산술 연산자 (Arithmetic Operators)>
- {+, -, *, /, %, ++, --}
- ++가 숫자 뒤에오면 선 대입 후 증가
- ++가 숫자 앞에 오면 선 증가 후 대입
- 덧셈 연산과 문자열 연결 연산을 수행한다
- 연산 대상이 한개라도 문자열이면 연결연산이 된다

<대입(할당)연산자 (Assignment Operators)>
- {=, +=, -=, *=, /=, %=}

<비교연산자 (Comparison Operators)>
- {==, ===, !=, !==, >, <, >=, <=, ?}
- 상황연산자
    - 조건 ? 조건이 true일때 값 : 조건이 false일때 반환할 값

<논리 연산자 (Logical Operators)>
- {|| (or), && (and), ! (not)}
- &&일때 앞이 true면 뒤에온 값이 결과, 앞이 false면 바로 결과

<단축 평가 (Short-Circuit Evaluation)>
- true || anthing -> true
- false || anything -> anything
- true && anything -> anything
- false && anything -> false
        // example
            function foo (str) {
                str = str || '';

<타입 연산자 (Type Operators)>

<!!>
- 빈 객체는 true로 변환된다

<Javascript Control Flow>
- Control Flow Statement 제어문은 조건에 다른 명령 실행 (조건문)이나 반복 실행 (반복문)이 필요할 때 사용된다
- 일반적으로 코드는 위에서 아래방향으로 순차적으로 실행 순서를 변경하거나 조건에 따라 실행 여부를 결정하기도 하고 반복할 수도 있다

<블록 구문 (Block Statement)>
- 구문들의 집합
-{} 로 그 범위를 정한다
- 함수, 객체리터럴, 흐름제어 구문에서 사용된다

<조건문 (Conditional Statement)>
- If 문 
    if (조건식){
    }else[
    ]
    - else는 옵션문
    - if else if 문
- switch 문
    - 값에 변수가 들어온다
    - break 키워드를 switch 구문에서 탈출하는 역할을 수행한다
        - 안쓴다면 case문의 조건과 일치하지 않더라도 실행순서는 다음 case문으로 이동한다
    - default문에는 마지막에 위치하니까 break를 쓸 필요가 없다

<반복문 (Loop)>
1. for 문
    - 초기문, 조건문, 증감문
    - i 를 기준으로 많이 돌린다
    - 가장 일반적 
2. while 문
    - 조건문이 참이면 코드 블록을 계속해서 반복실행한다
    - 조건문이 거짓이 되면 실행을 종료하고 반복문을 빠져나간다.
3. do while 문
    - 조건문을 확인하기 전에 무조건 1회 실행한다
    - 그 후 조건문을 확인하여 실행 여부를 판별한다
4. Continue
    - false만 구문실행한다
    - 이후 구문의 실행을 스킵하고 반복문의 조건문으로 이동한다