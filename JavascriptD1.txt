Day 1
<Programming Language>
- 언어= 자연어 & 인공어
- 프로그래밍언어는 인공어- 사람들이 목적을 가지고 만들어낸 
- 언어는 말로 표현할수있지만 문서로도 표현할수 있는 것. 
- 의사전달이라는걸 목적을 달성할수 있는것. 
- 화자와 청자 사이에는 common sense가 존재해야 의사전달이 가능하다
- 개발자가 컴퓨터에게 의도하는 명령을 정확히, 효율적으로 전달하고자 만든 언어.
- 개발자로서 주어와 목적어를 중요시하고 명확히 알아야한다.

<Computational Thinking>
- 코딩을 짜기전 목표를 확실히 해야한다.
    - 쓰는 습관을 들이는것.
- 수행되어야 하는 명령을 정의하기전에 목적과 문제를 명확히 이해한후, 분해하고, 쪼개고, 정리해야한다.
- 코딩에 앞서 문제해결방안 정의

<Syntax(구문) & Semantics(의미)>
- 명령을 수행할 주체는 컴퓨터이므로, 인간이 이해할 수 있는 자연어가 아니라 컴퓨터가 이해할 수 있는 언어인 기계어로 명령을 전달해야 한다. 컴퓨터는 아쉬울 것이 전혀 없다..
가장 유용한 대안은 인간이 이해할 수 있도록 약속된 문법(Syntax)을 사용하여 프로그램을 작성한 후, 그것을 컴퓨터가 이해할 수 있는 기계어로 변환하여 주는 일종의 번역기를 이용하는 것이다. 이 일종의 번역기를 컴파일러(compiler) 혹은 인터프리터(interpreter)라고 한다.
프로그래밍 언어는 Semantics(의미)와 Syntax(구문)의 조합으로 표현된다.
- 문법이 맞다 해서 끝이 아니라. 문법에 의해서 우리가 수행하고자할 요구를 명확히 지시하는것이 중요하다.
- 프로그래밍은 요구사항들이 집합을 분석하여 적절한 자료구조와 함수의 집합으로 변환한 후 그 흐름을 제어하는 것이다.
- 프로그래밍 언어는 변수와 값, 키워드, 연산자, 표현식조건문과 반목문에 의해 흐름제어 (flow control), 구문(statement),  구문의 집합인 함수 그리고 객체, 배열 등의 자료구조를 제공한다.
- 결국 프로그래밍은 문법에 부합하는 것은 물론이고 수행하고자 하는 바를 정확히 수행하는 것 즉, 요구사항이 실현(문제가 해결)되어야 의미가 있다.

<Javascript Introduction>
- 스크립트 언어는 컴파일 과정을 거치지 않고 자바스크립트 엔진이 읽어서 파싱을해서 바이트 코드를 읽어서 실행한다
- 컴파일러가 번역가면, 자바스크립트 엔진은 동시통역가
- 스크립트 언어가 컴파일 언어보다 실행은 물리적으로 느릴수 있어도 작성과정은 빠르다.
- C언어는 운영체제(OS)가 직접실행 시킨다.
- Javascript는 OS에서 구동하는 브라우저에서 실행시킨다.
- 95년도 초창기 목적은 웹페이지를 만드는 데에 보조적인 기능실행을 위해 만들었다
- 시간이 지나면서 자바스크립트가 할일이 대폭 늘었다.
- 왜 Jquery가 등장했을까?
    - DOM을 컨트롤하기가 쉽다.
- 인터프리터 언어이기 때문에 직접적으로 HTML파일안에 기술이 가능하다
- 멀티 패러다임 언어
	- 명령형, 함수형, 프로토타입 기반 객체지향형 언어다
- 함수형? -> google it**
- 크로스플랫폼을 위한 모바일 웹/앱 개발 분야에서도 가장 중요한 언어로 주목받고있다.
- 웹은 물론 모바일 하이브리드 앱, 서버사이드, Desktop, 로봇제어 언어로서 세계에서 가장 인기있는 언어이다

<Javascript Syntax Basics>
- Client 와 서버는 HTTP라는 통신망을 통해 통신한다.
- HTTP- 단방향 통신
- 섹션이나 토큰방식으로 기록
- 컴퓨터는 멀티태스킹이 안되기때문에, 한줄한줄 읽어내려갈때 만약 외부 css/js파일이있으면 하던걸 멈추고 외부 파일로가서 읽어 들어온다음에 다시 한줄한줄 읽어간다.
- RAM은 휘발성 - short term memory
- Cpu 는 연산결과를 기억한다
- 표현식
- 변수 variable
- 값  value
- 데이터타입 (자료형)
- 변수명
- 문자열 리터럴 (literal) 
- 리터럴= 변수 또는 상수에 저장되는 값 자체
- 변수명은 메모리에 할당된 공간을 가리키는 식별자 (identifier)이며 리터럴은 이 공간에 저장되는 값이다.
- 정적 (static) vs 동적 (dynamic)
- 7가지 데이터타입:
    1. Boolean (Primitive Data Type)
    2. Null (")
    3. Undefined (")
    4. Number (")
    5. String (")
    6. Symbol (")
    7. Object
- 연산자 (Operator)
    1. 대입 연산자
    2. 산술 연산자
    3. 문자열 연산자
    4. 비교 연산자
    5. 논리 연산자
    6. 인스턴스 생성 연산자
- 키워드 (Keyword)
    - 수행할 동작을 규정한 것이다
    - ex. var, function, if, while...
- 주석 (Comment)
    - 명료한 주석은 가독성을 높인다
    - 과도한것은 오히려 해가 되니, 주석없이도 잘 이해되고 읽을수 있는 명확한 코드가 최선이다.
